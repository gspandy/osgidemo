package org.example.osgi.mailbox.fixed;import java.util.ArrayList;import java.util.List;import org.example.osgi.mailbox.api.Mailbox;import org.example.osgi.mailbox.api.MailboxException;import org.example.osgi.mailbox.api.Message;public class FixedMailbox implements Mailbox {	protected final List<Message> messages;	public FixedMailbox(String[][] messageContents) {		messages = new ArrayList<Message>(2);		for (int i = 0; messageContents != null && i < messageContents.length; i++) {			Message msg = new StringMessage(i, messageContents[i][0], messageContents[i][1]);			messages.add(msg);		}	}	public synchronized long[] getAllMessages() {		long[] ids = new long[messages.size()];		for (int i = 0; i < ids.length; i++) {			ids[i] = i;		}		return ids;	}	public synchronized Message[] getMessages(long[] ids)			throws MailboxException {		Message[] result = new Message[ids.length];		for (int i = 0; i < ids.length; i++) {			long id = ids[i];			if (id < 0 || id >= messages.size()) {				throw new MailboxException("Invalid message ID: " + id);			}			result[i] = messages.get((int) id);		}		return result;	}	public synchronized long[] getMessagesSince(long id)			throws MailboxException {		int first = (int) (id + 1);		if (first < 0 || first >= messages.size()) {			throw new MailboxException("Invalid message ID: " + first);		}		long[] ids = new long[messages.size() - first];		for (int i = 0; i < ids.length; i++) {			ids[i] = i + first;		}		return ids;	}	public void markRead(boolean read, long[] ids) {		// Ignore	}}